{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"treeviz.py","provenance":[],"authorship_tag":"ABX9TyOFfetqu1igb4xPuYKwbftw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"VHQk9vXQpzce"},"outputs":[],"source":["\"\"\"\n","treeviz.py\n","A simple tree visualizer for sklearn DecisionTreeClassifiers.\n","Written by Lutz Hamel, (c) 2017 - Univeristy of Rhode Island\n","\"\"\"\n","import operator\n","\n","def tree_print(clf, X):\n","    \"\"\"\n","    Print the tree of a sklearn DecisionTreeClassifier\n","    Parameters\n","    ----------\n","    clf : DecisionTreeClassifier - A tree that has already been fit.\n","    X : The original training set\n","    \"\"\"\n","    tlevel = _tree_rprint('', clf, X.columns, clf.classes_)\n","    print('<',end='')\n","    for i in range(3*tlevel - 2):\n","        print('-',end='')\n","    print('>')\n","    print('Tree Depth: ',tlevel)\n","\n","def _tree_rprint(kword, clf, features, labels, node_index=0, tlevel_index=0):\n","    # Note: The DecisionTreeClassifier uses the Tree structure defined in:\n","    # \t\tgithub.com/scikit-learn/scikit-learn/blob/master/sklearn/tree/_tree.pyx\n","    #       it is an array based tree implementation:\n","\n","    # indent the nodes according to their tree level\n","    for i in range(tlevel_index):\n","        print('  |',end='')\n","\n","\t#  TODO: the following should use the TREE_LEAF constant defined in _tree.pyx\n","\t#        instead of -1, not quite sure how to get at it from the tree user level\n","    if clf.tree_.children_left[node_index] == -1:  # indicates leaf\n","        print(kword, end=' ' if kword else '')\n","        # get the majority label\n","        count_list = clf.tree_.value[node_index, 0]\n","        #lhh\n","        #print(\"count list: {}\".format(count_list))\n","        if len(count_list) == 1:\n","            # regression problem\n","            print(count_list[0])\n","        else:\n","            # get the majority label\n","            max_index, max_value = max(enumerate(count_list), key=operator.itemgetter(1))\n","            max_label = labels[max_index]\n","            print(max_label)\n","        return tlevel_index\n","    \n","    else:\n","        # compute and print node label\n","        feature = features[clf.tree_.feature[node_index]]\n","        threshold = clf.tree_.threshold[node_index]\n","        print(kword, end=' ' if kword else '')\n","        print('if {} =< {}: '.format(feature, threshold))\n","        # recurse down the children\n","        left_index = clf.tree_.children_left[node_index]\n","        right_index = clf.tree_.children_right[node_index]\n","        ltlevel_index = _tree_rprint('then', clf, features, labels, left_index, tlevel_index+1)\n","        rtlevel_index = _tree_rprint('else', clf, features, labels, right_index, tlevel_index+1)\n","        # return the maximum depth of either one of the children\n","        return max(ltlevel_index,rtlevel_index)"]}]}